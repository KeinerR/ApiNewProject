
@model VistaNewProject.Models.Pedido

@{
    ViewData["Title"] = "Create";
    var successMessage = TempData["successMessage"] as string;
}
<div id="containepedido">

<h4 style="text-align:center">Agregar Pedidos</h4>
<hr />


<div>
    <a asp-action="Index" class="btn btn-primary">

        <i class="fas fa-arrow-left"></i> Cancelar

    </a>
</div>


<form asp-action="Create" method="post" onsubmit="return validarpedido();">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
        <div class="col-6">
            <label asp-for="ClienteId" class="control-label"> Cliente</label>
            <input type="text" id="ClienteIdTxt" class="form-control" list="clientesList" />
            <input type="" id="ClienteIdHidden" name="clienteId" />
            <datalist id="clientesList">
                @foreach (var cliente in ViewBag.Clientes)
                {
                    if (cliente.EstadoCliente != 0)
                    {
                        <option value="@cliente.NombreEntidad" data-id="@cliente.ClienteId">@cliente.NombreEntidad</option>
                        <text>
                            clientesMap["@cliente.NombreEntidad"] = "@cliente.ClienteId";
                        </text>
                    }
                }
            </datalist>
            <span id="ClienteIdspan" class="text-danger"></span>
        </div>



        <div class="col-6">
            <label asp-for="TipoServicio" class="control-label"></label>
            <select asp-for="TipoServicio" id="TipoServicio" name="TipoServicio" class="form-control" onchange="updateEstadoPedido()">
                <option value="Caja">Caja</option>
                <option value="Domicilio">Domicilio</option>
            </select>
            <span asp-validation-for="TipoServicio" class="text-danger"></span>
        </div>
        <div class="col-6">
            <label asp-for="FechaPedido" class="control-label"></label>
            <input type="datetime-local" id="FechaPedido" name="FechaPedido" class="form-control" readonly />
            <span id="FechaPedidoerror" class="text-danger"></span>
        </div>
        <div class="col-6">
            <label asp-for="EstadoPedido" class="control-label"></label>
            <select asp-for="EstadoPedido" id="EstadoPedido" name="EstadoPedido" class="form-control">
                <option value="Pendiente">Pendiente</option>
                <option value="Realizado">Realizado</option>
                <option value="Cancelado">Cancelado</option>
            </select>
            <span asp-validation-for="EstadoPedido" class="text-danger"></span>
        </div>
    </div>

    <div class=" mt-4">

        <div class="d-flex justify-content-center aling-item-center mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-plus-circle"></i> Agregar
            </button>
        </div>
    </div>



</form>



</div>
<script>
    // Crear un objeto para mapear IDs de cliente con nombres de entidad
    var clientesNombreEntidadMap = {};
    var clientesMap = {};

    // Iterar sobre los clientes y agregarlos al mapa de nombres de entidad y al mapa de IDs de cliente
    @foreach (var cliente in ViewBag.Clientes)
    {
        <text>
            clientesNombreEntidadMap["@cliente.ClienteId"] = "@cliente.NombreEntidad";
        clientesMap["@cliente.NombreEntidad"] = "@cliente.ClienteId";
        </text>
    }

        // Función para actualizar el campo ClienteIdHidden con el ID correspondiente
        $("#ClienteIdTxt").on("change", function () {
            var selectedOption = $("#clientesList option[value='" + $(this).val() + "']");
            if (selectedOption.length) {
                $("#ClienteIdHidden").val(selectedOption.data("id"));
                actualizarNombreEntidad();
                quitarError(this, document.getElementById("ClienteIdspan"));
            } else {
                // Verificar si el valor ingresado es un número
                var valor = $(this).val();
                if (!isNaN(parseFloat(valor)) && isFinite(valor)) {
                    $("#ClienteIdHidden").val(valor);
                    actualizarNombreEntidad();
                } else {
                    $("#ClienteIdHidden").val("");
                    $("#ClienteIdTxt").val(""); // Limpiar el campo ClienteIdTxt si no se encuentra una entidad
                }
            }
        });

    // Función para actualizar el campo ClienteIdTxt con el nombre de entidad correspondiente
    function actualizarNombreEntidad() {
        var clienteId = $("#ClienteIdHidden").val().trim();
        var nombreEntidad = clientesNombreEntidadMap[clienteId];
        if (nombreEntidad) {
            $("#ClienteIdTxt").val(nombreEntidad);
            quitarError(document.getElementById("ClienteIdTxt"), document.getElementById("ClienteIdspan"));
        }
    }

    // Llamar a la función para establecer el nombre de entidad inicialmente
    actualizarNombreEntidad();

    // Escuchar cambios en el campo oculto ClienteIdHidden para actualizar el nombre de entidad
    $("#ClienteIdHidden").on("change", function () {
        actualizarNombreEntidad();
    });


    document.addEventListener('DOMContentLoaded', function () {

        var fechaPedido = document.getElementById("FechaPedido");

        var fechaActual = new Date();
        var formateada = fechaActual.toISOString().slice(0, 16);


        fechaPedido.value = formateada;



    });


    function updateEstadoPedido() {
        var tipo = document.getElementById("TipoServicio").value;
        var estado = document.getElementById("EstadoPedido");

        if (tipo === "Caja") {
            estado.value = "Realizado";
            for (var i = 0; i < estado.options.length; i++) {
                if (estado.options[i].value !== "Realizado") {
                    estado.options[i].style.display = 'none';
                } else {
                    estado.options[i].style.display = 'block';
                }
            }
        } else if (tipo === "Domicilio") {
            estado.value = "Pendiente";
            for (var i = 0; i < estado.options.length; i++) {
                if (estado.options[i].value !== "Pendiente") {
                    estado.options[i].style.display = 'none';
                } else {
                    estado.options[i].style.display = 'block';
                }
            }
        } else {
            for (var i = 0; i < estado.options.length; i++) {
                estado.options[i].style.display = 'block';
            }
            estado.value = ""; // Reset to default or desired value if needed
        }
    }

    // Run the function on page load to ensure the correct state if the form is pre-filled
    document.addEventListener("DOMContentLoaded", function () {
        updateEstadoPedido();
    });

</script>



@if (!string.IsNullOrEmpty(successMessage))
{
    <script>
        Swal.fire({
            title: '¡Pedido guardado!',
            text: '@successMessage',
            icon: 'success',
            confirmButtonText: 'Aceptar'
        });
    </script>
}



<script src="~/js/pedidos.js"></script>
