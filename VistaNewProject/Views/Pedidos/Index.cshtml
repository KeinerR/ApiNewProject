@model IEnumerable<VistaNewProject.Models.Pedido>

@{
    ViewData["Title"] = "Index";
<<<<<<< Updated upstream
    var validationMessage = TempData["Validacion"] as string;
}

@if (!string.IsNullOrEmpty(validationMessage))
{
    <script>
        // Mostrar SweetAlert con el mensaje TempData
        Swal.fire({
            title: '¡Pedido creado!',
            text: '@validationMessage',
            icon: 'success',
            confirmButtonText: 'Aceptar'
        });
    </script>
}
=======
}

>>>>>>> Stashed changes
<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.PedidoId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ClienteId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TipoServicio)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FechaPedido)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ValorTotalPedido)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EstadoPedido)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
<<<<<<< Updated upstream
        @foreach (var item in Model)
        {
            if (item != null)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.PedidoId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ClienteId)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TipoServicio)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.FechaPedido)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ValorTotalPedido)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EstadoPedido)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.PedidoId }) |
                        @Html.ActionLink("Details", "Details", new { id = item.PedidoId }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.PedidoId })
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="6">¡El objeto Pedido es nulo!</td>
                </tr>
            }
        }
=======
@foreach (var item in Model) {
        <tr>
          
            <td>
                @Html.DisplayFor(modelItem => item.ClienteId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TipoServicio)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FechaPedido)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ValorTotalPedido)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EstadoPedido)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
}
>>>>>>> Stashed changes
    </tbody>
</table>
